{"version":3,"sources":["components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","cell_size","height","React","Component","Game","state","cells","game_is_running","grid_on","interval","handleOnClick","event","elementOffset","getOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","cell_holder","startGame","runGeneration","stopGame","timeoutHandler","window","clearTimeout","clearGame","makeEmptyBoard","randomGame","random","showGrid","document","getElementById","hideGrid","game_height","game_width","push","rect","boardRef","getBoundingClientRect","doc","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","neighbors","directions","i","length","cell_direction","y1","x1","newBoard","cell_neighbors","calculateNeighbors","setTimeout","id","backgroundSize","onClick","undefined","ref","n","map","cell","key","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab5fa647.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Game.css';\r\n\r\n\r\nconst cell_size = 10;\r\nconst game_width = 800;\r\nconst game_height = 600;\r\n\r\n\r\nclass Cell extends React.Component {\r\n\r\n    render() {\r\n\r\n        const {x,y} = this.props;\r\n\r\n        return(\r\n            <>\r\n                <div className=\"CellStyle\" style={{\r\n                    left: `${cell_size * x + 1}px`,\r\n                    top: `${cell_size * y + 1}px`,\r\n                    width: `${cell_size - 1}px`,\r\n                    height: `${cell_size - 1}px`,\r\n            }} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rows = game_height / cell_size;\r\n        this.cols = game_width / cell_size;\r\n        this.board = this.makeEmptyBoard();\r\n\r\n    }\r\n\r\n    state = {\r\n        cells: [],\r\n        game_is_running: false,\r\n        grid_on: false,\r\n        interval: 100,\r\n    }\r\n\r\n\r\n    // Make Board\r\n    makeEmptyBoard() {\r\n        let board = [];\r\n        for(let y = 0; y < this.rows; y++) {\r\n            board[y] = [];\r\n            for(let x = 0; x < this.cols; x++) {\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    // Make Cells\r\n    makeCells() {\r\n        let cells = [];\r\n        for(let y = 0; y < this.rows; y++) {\r\n            for(let x = 0; x < this.cols; x++) {\r\n                if(this.board[y][x]) {\r\n                    cells.push({x, y});\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n\r\n\r\n    // Gets the elements offset for the game board\r\n    getOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop\r\n        };\r\n    }\r\n\r\n    // OnClick Handler\r\n    handleOnClick = (event) => {\r\n        const elementOffset = this.getOffset();\r\n        const offsetX = event.clientX - elementOffset.x;\r\n        const offsetY = event.clientY - elementOffset.y;\r\n\r\n        const x = Math.floor(offsetX / cell_size);\r\n        const y = Math.floor(offsetY / cell_size);\r\n        \r\n        if(x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells(), cell_holder: this.makeCells()});\r\n    }\r\n\r\n    // Game Controls\r\n    startGame = () => {\r\n        this.setState({ game_is_running: true });\r\n        this.runGeneration();\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.setState({ game_is_running: false });\r\n        if(this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    clearGame = () => {\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({cells: this.makeCells()});\r\n    }\r\n\r\n    randomGame = () => {\r\n        for(let y = 0; y < this.rows; y++) {\r\n            for(let x = 0; x < this.cols; x++) {\r\n                this.board[y][x] = ( Math.random() >= 0.85);\r\n            }\r\n        }\r\n        this.setState({cells: this.makeCells()});\r\n    }\r\n\r\n    showGrid = () => {\r\n        this.setState({ grid_on: true });\r\n        document.getElementById(\"grid\").className = \"gameGrid_ON\";\r\n        \r\n    }\r\n\r\n    hideGrid = () => {\r\n        this.setState({ grid_on: false });\r\n        document.getElementById(\"grid\").className = \"gameGrid_OFF\";\r\n    }\r\n\r\n\r\n    // Find the cells around the current cell\r\n    calculateNeighbors(board, x, y) {\r\n        // Set neighbors to 0\r\n        let neighbors = 0;\r\n        // Set cell looking directions\r\n        const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n\r\n        for(let i = 0; i < directions.length; i++) {\r\n            const cell_direction = directions[i]\r\n            let y1 = y + cell_direction[0];\r\n            let x1 = x + cell_direction[1];\r\n\r\n            if(x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n                neighbors++;\r\n            }\r\n        }\r\n        return neighbors;\r\n    } \r\n\r\n    // Run the next iteration of the game\r\n    runGeneration() {\r\n        let newBoard = this.makeEmptyBoard();\r\n\r\n        // Game Logic\r\n        for(let y = 0; y < this.rows; y++) {\r\n            for(let x = 0; x < this.cols; x++) {\r\n                let cell_neighbors = this.calculateNeighbors(this.board, x, y);\r\n                if(this.board[y][x]) {\r\n                    // If cells has 2 or 3 neighbors, lives to next generation\r\n                    if(cell_neighbors === 2 || cell_neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    // Otherwise the cell dies\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                // Otherwise if cell is alive and has 3 neighbors, lives to next generation\r\n                } else {\r\n                    if(!this.board[y][x] && cell_neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({cells: this.makeCells()});\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runGeneration();\r\n        }, this.state.interval)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {cells, game_is_running, grid_on} = this.state;\r\n        // console.log(\"CELLS: \", cells);\r\n\r\n        return(\r\n            <>\r\n                <div className=\"gameGrid_OFF\"\r\n                    id=\"grid\"\r\n                    style={{ \r\n                        width: game_width, \r\n                        height: game_height,\r\n                        backgroundSize: `${cell_size}px ${cell_size}px`\r\n                    }}\r\n\r\n                    onClick={!game_is_running ? this.handleOnClick : undefined}\r\n                    ref={(n) => {this.boardRef = n;}}\r\n                >\r\n                    {cells.map(cell => (\r\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x}, ${cell.y}`} />\r\n                    ))}\r\n                    {/* {console.log(\"CELLS MAP: \", cells)} */}\r\n                </div>\r\n\r\n                <div className=\"buttons\">\r\n                    {game_is_running ?\r\n                        <button className=\"button\" onClick={this.stopGame}>STOP</button> \r\n                        :\r\n                        <button className=\"button\" onClick={this.startGame}>START</button>\r\n                    }\r\n                    {!game_is_running ? \r\n                        <button className=\"button\" onClick={this.randomGame}>RANDOM</button>\r\n                        :\r\n                        <button className=\"button\">RANDOM</button>\r\n                    }\r\n                    {!game_is_running ?        \r\n                        <button className=\"button\" onClick={this.clearGame}>CLEAR</button>\r\n                        :\r\n                        <button className=\"button\">CLEAR</button>\r\n                    }\r\n                    {!grid_on ?\r\n                        <button className=\"button show-grid\" onClick={this.showGrid}>SHOW GRID</button>\r\n                        :\r\n                        <button className=\"button show-grid\" onClick={this.hideGrid}>HIDE GRID</button>\r\n                    }\r\n                    \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './css/App.css'\n\nimport Game from './components/Game'\n\nclass App extends React.Component {\n\n    render() {\n\n        return(\n            <>\n                <div className=\"pageContainer\">\n                    <div className=\"heading\">\n                        <h1>GAME OF LIFE</h1>\n                    </div>\n                    <div className=\"gameScreen\">\n                        <Game />\n                    </div>\n                    <div className=\"footer\">\n                        <div className=\"copyright\">\n                            <span> &copy;2020 Bradley Krigbaum</span>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, \n  document.getElementById('root') \n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}